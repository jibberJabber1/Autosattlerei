{"version":3,"sources":["ng://angular2-image-gallery/lib/services/image.service.ts","ng://angular2-image-gallery/lib/gallery/gallery.component.ts","ng://angular2-image-gallery/lib/viewer/viewer.component.ts","ng://angular2-image-gallery/lib/angular2-image-gallery.module.ts"],"names":["ImageService","this","imagesUpdatedSource","Subject","imageSelectedIndexUpdatedSource","showImageViewerSource","imagesUpdated$","asObservable","imageSelectedIndexUpdated$","showImageViewerChanged$","prototype","updateImages","images","next","updateSelectedImageIndex","newIndex","showImageViewer","show","Injectable","GalleryComponent","imageService","http","changeDetectorRef","gallery","imageDataStaticPath","imageDataCompletePath","dataFileName","minimalQualityCategory","rowIndex","rightArrowInactive","leftArrowInactive","providedImageMargin","providedImageSize","providedGalleryName","providedMetadataUri","undefined","rowsPerPage","viewerChange","EventEmitter","triggerCycle","event","scaleGallery","windowResize","render","ngOnInit","_this","fetchDataAndRender","viewerSubscription","subscribe","visibility","emit","ngOnChanges","changes","ngOnDestroy","unsubscribe","openImageViewer","img","indexOf","navigate","direction","length","refreshNavigationErrorState","calcImageMargin","ratio","getGalleryWidth","Math","round","max","get","data","forEach","image","err","console","error","tempRow","currentRowIndex","i","shouldAddCandidate","pop","imgRow","candidate","oldDifference","calcIdealHeight","calcRowHeight","push","newDifference","abs","originalRowWidth","calcOriginalRowWidth","individualRatio","galleryContainer","nativeElement","clientWidth","scrollWidth","imageCounter","maximumGalleryImageHeight","slice","ratio_1","checkForAsyncLoading","width","height","detectChanges","imageElements","toArray","isScrolledIntoView","element","elementTop","getBoundingClientRect","top","elementBottom","bottom","window","innerHeight","Component","args","selector","template","HttpClient","ChangeDetectorRef","Input","Output","ViewChild","static","ViewChildren","HostListener","ViewerComponent","currentIdx","leftArrowVisible","rightArrowVisible","categorySelected","qualitySelectorShown","qualitySelected","transform","updateQuality","showViewer","math","Object","defineProperty","pan","swipe","deltaX","onResize","updateImage","showQualitySelector","qualityChanged","newQuality","imageLoaded","hideNavigationArrows","showNavigationArrows","closeViewer","onKeydown","prevent","find","no","keyCode","preventDefault","setTimeout","screenWidth","innerWidth","screenHeight","host","(document:keydown)","animations","trigger","state","style","opacity","transition","animate","Angular2ImageGalleryModule","NgModule","imports","CommonModule","FormsModule","HttpClientModule","BrowserAnimationsModule","declarations","providers","exports"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core'\nimport { Observable, Subject } from 'rxjs'\n\n@Injectable()\nexport class ImageService {\n    private imagesUpdatedSource = new Subject<Array<any>>()\n    private imageSelectedIndexUpdatedSource = new Subject<number>()\n    private showImageViewerSource = new Subject<boolean>()\n\n    imagesUpdated$: Observable<Array<any>> = this.imagesUpdatedSource.asObservable()\n    imageSelectedIndexUpdated$: Observable<number> = this.imageSelectedIndexUpdatedSource.asObservable()\n    showImageViewerChanged$: Observable<boolean> = this.showImageViewerSource.asObservable()\n\n    updateImages(images: Array<any>): void {\n        this.imagesUpdatedSource.next(images)\n    }\n\n    updateSelectedImageIndex(newIndex: number): void {\n        this.imageSelectedIndexUpdatedSource.next(newIndex)\n    }\n\n    showImageViewer(show: boolean): void {\n        this.showImageViewerSource.next(show)\n    }\n}\n","import {\n  ChangeDetectorRef, Component, ElementRef, EventEmitter, HostListener,\n  Input, OnChanges, OnDestroy, OnInit, Output, QueryList, SimpleChanges, ViewChild, ViewChildren\n} from '@angular/core'\nimport { ImageService } from '../services/image.service'\nimport { Subscription } from 'rxjs/internal/Subscription'\nimport { HttpClient } from '@angular/common/http'\n\n@Component({\n    selector: 'gallery',\n    templateUrl: './gallery.component.html',\n    styleUrls: ['./gallery.component.css']\n})\nexport class GalleryComponent implements OnInit, OnDestroy, OnChanges {\n    gallery: Array<any> = []\n    imageDataStaticPath: string = 'assets/img/gallery/'\n    imageDataCompletePath: string = ''\n    dataFileName: string = 'data.json'\n    images: Array<any> = []\n    minimalQualityCategory = 'preview_xxs'\n    viewerSubscription: Subscription\n    rowIndex: number = 0\n    rightArrowInactive: boolean = false\n    leftArrowInactive: boolean = false\n\n    @Input('flexBorderSize') providedImageMargin: number = 3\n    @Input('flexImageSize') providedImageSize: number = 7\n    @Input('galleryName') providedGalleryName: string = ''\n    @Input('metadataUri') providedMetadataUri: string = undefined\n    @Input('maxRowsPerPage') rowsPerPage: number = 200\n\n    @Output() viewerChange = new EventEmitter<boolean>()\n\n    @ViewChild('galleryContainer', { static: true }) galleryContainer: ElementRef\n    @ViewChildren('imageElement') imageElements: QueryList<any>\n\n    @HostListener('window:scroll', ['$event']) triggerCycle(event: any): void {\n        this.scaleGallery()\n    }\n\n    @HostListener('window:resize', ['$event']) windowResize(event: any): void {\n        this.render()\n    }\n\n    constructor(public imageService: ImageService, public http: HttpClient, public changeDetectorRef: ChangeDetectorRef) {\n    }\n\n    ngOnInit(): void {\n        this.fetchDataAndRender()\n        this.viewerSubscription = this.imageService.showImageViewerChanged$\n            .subscribe((visibility: boolean) => this.viewerChange.emit(visibility))\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        // input params changed\n        if (changes['providedGalleryName'] != undefined) {\n            this.fetchDataAndRender()\n        } else {\n            this.render()\n        }\n    }\n\n    ngOnDestroy(): void {\n        if (this.viewerSubscription) {\n            this.viewerSubscription.unsubscribe()\n        }\n    }\n\n    openImageViewer(img: any): void {\n        this.imageService.updateImages(this.images)\n        this.imageService.updateSelectedImageIndex(this.images.indexOf(img))\n        this.imageService.showImageViewer(true)\n    }\n\n    /**\n     * direction (-1: left, 1: right)\n     */\n    navigate(direction: number): void {\n        if ((direction === 1 && this.rowIndex < this.gallery.length - this.rowsPerPage)\n            || (direction === -1 && this.rowIndex > 0)) {\n            this.rowIndex += (this.rowsPerPage * direction)\n        }\n        this.refreshNavigationErrorState()\n    }\n\n    calcImageMargin(): number {\n        const galleryWidth = this.getGalleryWidth()\n        const ratio = galleryWidth / 1920\n        return Math.round(Math.max(1, this.providedImageMargin * ratio))\n    }\n\n    private fetchDataAndRender(): void {\n        this.imageDataCompletePath = this.providedMetadataUri\n\n        if (!this.providedMetadataUri) {\n            this.imageDataCompletePath = this.providedGalleryName !== '' ?\n                `${this.imageDataStaticPath + this.providedGalleryName}/${this.dataFileName}` :\n                this.imageDataStaticPath + this.dataFileName\n        }\n\n        this.http.get(this.imageDataCompletePath)\n          .subscribe(\n            (data: Array<any>) => {\n                    this.images = data\n                    this.imageService.updateImages(this.images)\n\n                    this.images.forEach(image => {\n                      image['galleryImageLoaded'] = false\n                      image['viewerImageLoaded'] = false\n                      image['srcAfterFocus'] = ''\n                    })\n                    // twice, single leads to different strange browser behaviour\n                    this.render()\n                    this.render()\n                },\n              err => {\n                    if (this.providedMetadataUri) {\n                      console.error(`Provided endpoint '${this.providedMetadataUri}' did not serve metadata correctly or in the expected format.\n      See here for more information: https://github.com/BenjaminBrandmeier/angular2-image-gallery/blob/master/docs/externalDataSource.md,\n      Original error: ${err}`)\n                    } else {\n                        console.error(`Did you run the convert script from angular2-image-gallery for your images first? Original error: ${err}`)\n                    }\n              },\n            () => undefined)\n    }\n\n    private render(): void {\n        this.gallery = []\n\n        let tempRow = [this.images[0]]\n        let currentRowIndex = 0\n        let i = 0\n\n        for (i; i < this.images.length; i++) {\n            while (this.images[i + 1] && this.shouldAddCandidate(tempRow, this.images[i + 1])) {\n                i++\n            }\n            if (this.images[i + 1]) {\n                tempRow.pop()\n            }\n            this.gallery[currentRowIndex++] = tempRow\n\n            tempRow = [this.images[i + 1]]\n        }\n\n        this.scaleGallery()\n    }\n\n    private shouldAddCandidate(imgRow: Array<any>, candidate: any): boolean {\n        const oldDifference = this.calcIdealHeight() - this.calcRowHeight(imgRow)\n        imgRow.push(candidate)\n        const newDifference = this.calcIdealHeight() - this.calcRowHeight(imgRow)\n\n        return Math.abs(oldDifference) > Math.abs(newDifference)\n    }\n\n    private calcRowHeight(imgRow: Array<any>): number {\n        const originalRowWidth = this.calcOriginalRowWidth(imgRow)\n\n        const ratio = (this.getGalleryWidth() - (imgRow.length - 1) * this.calcImageMargin()) / originalRowWidth\n        const rowHeight = imgRow[0][this.minimalQualityCategory]['height'] * ratio\n\n        return rowHeight\n    }\n\n    private calcOriginalRowWidth(imgRow: Array<any>): number {\n        let originalRowWidth = 0\n        imgRow.forEach(img => {\n            const individualRatio = this.calcIdealHeight() / img[this.minimalQualityCategory]['height']\n            img[this.minimalQualityCategory]['width'] = img[this.minimalQualityCategory]['width'] * individualRatio\n            img[this.minimalQualityCategory]['height'] = this.calcIdealHeight()\n            originalRowWidth += img[this.minimalQualityCategory]['width']\n        })\n\n        return originalRowWidth\n    }\n\n    private calcIdealHeight(): number {\n        return this.getGalleryWidth() / (80 / this.providedImageSize) + 100\n    }\n\n    private getGalleryWidth(): number {\n        if (this.galleryContainer.nativeElement.clientWidth === 0) {\n            // for IE11\n            return this.galleryContainer.nativeElement.scrollWidth\n        }\n        return this.galleryContainer.nativeElement.clientWidth\n    }\n\n    private scaleGallery(): void {\n        let imageCounter = 0\n        let maximumGalleryImageHeight = 0\n\n        this.gallery.slice(this.rowIndex, this.rowIndex + this.rowsPerPage)\n          .forEach(imgRow => {\n            const originalRowWidth = this.calcOriginalRowWidth(imgRow)\n\n            if (imgRow !== this.gallery[this.gallery.length - 1]) {\n                const ratio = (this.getGalleryWidth() - (imgRow.length - 1) * this.calcImageMargin()) / originalRowWidth\n\n                imgRow.forEach((img: any) => {\n                    img['width'] = img[this.minimalQualityCategory]['width'] * ratio\n                    img['height'] = img[this.minimalQualityCategory]['height'] * ratio\n                    maximumGalleryImageHeight = Math.max(maximumGalleryImageHeight, img['height'])\n                    this.checkForAsyncLoading(img, imageCounter++)\n                })\n            } else {\n                imgRow.forEach((img: any) => {\n                    img.width = img[this.minimalQualityCategory]['width']\n                    img.height = img[this.minimalQualityCategory]['height']\n                    maximumGalleryImageHeight = Math.max(maximumGalleryImageHeight, img['height'])\n                    this.checkForAsyncLoading(img, imageCounter++)\n                })\n            }\n        })\n\n        this.minimalQualityCategory = maximumGalleryImageHeight > 375 ? 'preview_xs' : 'preview_xxs'\n        this.refreshNavigationErrorState()\n\n        this.changeDetectorRef.detectChanges()\n    }\n\n    private checkForAsyncLoading(image: any, imageCounter: number): void {\n        const imageElements = this.imageElements.toArray()\n\n        if (image['galleryImageLoaded'] ||\n            (imageElements.length > 0 &&\n              imageElements[imageCounter] &&\n              this.isScrolledIntoView(imageElements[imageCounter].nativeElement))) {\n            image['galleryImageLoaded'] = true\n            image['srcAfterFocus'] = image[this.minimalQualityCategory]['path']\n        } else {\n            image['srcAfterFocus'] = ''\n        }\n    }\n\n    private isScrolledIntoView(element: any): boolean {\n        const elementTop = element.getBoundingClientRect().top\n        const elementBottom = element.getBoundingClientRect().bottom\n\n        return elementTop < window.innerHeight && elementBottom >= 0 && (elementBottom > 0 || elementTop > 0)\n    }\n\n    private refreshNavigationErrorState(): void {\n        this.leftArrowInactive = this.rowIndex == 0\n        this.rightArrowInactive = this.rowIndex > (this.gallery.length - this.rowsPerPage)\n    }\n}\n","import { ImageService } from '../services/image.service'\nimport { Component } from '@angular/core'\nimport { animate, state, style, transition, trigger } from '@angular/animations'\n\n@Component({\n    selector: 'viewer',\n    templateUrl: './viewer.component.html',\n    styleUrls: ['./viewer.component.css'],\n    host: {\n        '(document:keydown)': 'onKeydown($event)'\n    },\n    animations: [\n        trigger('imageTransition', [\n            state('enterFromRight', style({\n                opacity: 1,\n                transform: 'translate(0px, 0px)'\n            })),\n            state('enterFromLeft', style({\n                opacity: 1,\n                transform: 'translate(0px, 0px)'\n            })),\n            state('leaveToLeft', style({\n                opacity: 0,\n                transform: 'translate(-100px, 0px)'\n            })),\n            state('leaveToRight', style({\n                opacity: 0,\n                transform: 'translate(100px, 0px)'\n            })),\n            transition('* => enterFromRight', [\n                style({\n                    opacity: 0,\n                    transform: 'translate(30px, 0px)'\n                }),\n                animate('250ms 500ms ease-in')\n            ]),\n            transition('* => enterFromLeft', [\n                style({\n                    opacity: 0,\n                    transform: 'translate(-30px, 0px)'\n                }),\n                animate('250ms 500ms ease-in')\n            ]),\n            transition('* => leaveToLeft', [\n                style({\n                    opacity: 1\n                }),\n                animate('250ms ease-out')]\n            ),\n            transition('* => leaveToRight', [\n                style({\n                    opacity: 1\n                }),\n                animate('250ms ease-out')]\n            )\n        ]),\n        trigger('showViewerTransition', [\n            state('true', style({\n                opacity: 1\n            })),\n            state('void', style({\n                opacity: 0\n            })),\n            transition('void => *', [\n                style({\n                    opacity: 0\n                }),\n                animate('1000ms ease-in')]\n            ),\n            transition('* => void', [\n                style({\n                    opacity: 1\n                }),\n                animate('500ms ease-out')]\n            )\n        ])\n    ]\n})\n\nexport class ViewerComponent {\n    showViewer: boolean\n    images: Array<any> = [{}]\n    currentIdx: number = 0\n    leftArrowVisible: boolean = true\n    rightArrowVisible: boolean = true\n    categorySelected: string = 'preview_xxs'\n    transform: number\n    math: Math\n    private qualitySelectorShown: boolean = false\n    private qualitySelected: string = 'auto'\n\n    constructor(private imageService: ImageService) {\n        imageService.imagesUpdated$.subscribe(\n            images => {\n                this.images = images\n            })\n        imageService.imageSelectedIndexUpdated$.subscribe(\n            newIndex => {\n                this.currentIdx = newIndex\n                this.images.forEach(image => image['active'] = false)\n                this.images[this.currentIdx]['active'] = true\n                this.transform = 0\n                this.updateQuality()\n            })\n        imageService.showImageViewerChanged$.subscribe(\n            showViewer => {\n                this.showViewer = showViewer\n            })\n        this.math = Math\n    }\n\n    get leftArrowActive(): boolean {\n        return this.currentIdx > 0\n    }\n\n    get rightArrowActive(): boolean {\n        return this.currentIdx < this.images.length - 1\n    }\n\n    pan(swipe: any): void {\n        this.transform = swipe.deltaX\n    }\n\n    onResize(): void {\n        this.images.forEach(image => {\n            image['viewerImageLoaded'] = false\n            image['active'] = false\n        })\n        this.updateImage()\n    }\n\n    showQualitySelector(): void {\n        this.qualitySelectorShown = !this.qualitySelectorShown\n    }\n\n    qualityChanged(newQuality: any): void {\n        this.qualitySelected = newQuality\n        this.updateImage()\n    }\n\n    imageLoaded(image: any): void {\n        image['viewerImageLoaded'] = true\n    }\n\n    /**\n     * direction (-1: left, 1: right)\n     * swipe (user swiped)\n     */\n    navigate(direction: number, swipe: any): void {\n        if ((direction === 1 && this.currentIdx < this.images.length - 1) ||\n            (direction === -1 && this.currentIdx > 0)) {\n\n            if (direction == -1) {\n                this.images[this.currentIdx]['transition'] = 'leaveToRight'\n                this.images[this.currentIdx - 1]['transition'] = 'enterFromLeft'\n            } else {\n                this.images[this.currentIdx]['transition'] = 'leaveToLeft'\n                this.images[this.currentIdx + 1]['transition'] = 'enterFromRight'\n            }\n            this.currentIdx += direction\n\n            if (swipe) {\n                this.hideNavigationArrows()\n            } else {\n                this.showNavigationArrows()\n            }\n            this.updateImage()\n        }\n    }\n\n    showNavigationArrows(): void {\n        this.leftArrowVisible = true\n        this.rightArrowVisible = true\n    }\n\n    closeViewer(): void {\n        this.images.forEach(image => image['transition'] = undefined)\n        this.images.forEach(image => image['active'] = false)\n        this.imageService.showImageViewer(false)\n    }\n\n    onKeydown(event: KeyboardEvent): void {\n        const prevent = [37, 39, 27, 36, 35]\n            .find(no => no === event.keyCode)\n        if (prevent) {\n            event.preventDefault()\n        }\n\n        switch (prevent) {\n            case 37:\n                // navigate left\n                this.navigate(-1, false)\n                break\n            case 39:\n                // navigate right\n                this.navigate(1, false)\n                break\n            case 27:\n                // esc\n                this.closeViewer()\n                break\n            case 36:\n                // pos 1\n                this.images[this.currentIdx]['transition'] = 'leaveToRight'\n                this.currentIdx = 0\n                this.images[this.currentIdx]['transition'] = 'enterFromLeft'\n                this.updateImage()\n                break\n            case 35:\n                // end\n                this.images[this.currentIdx]['transition'] = 'leaveToLeft'\n                this.currentIdx = this.images.length - 1\n                this.images[this.currentIdx]['transition'] = 'enterFromRight'\n                this.updateImage()\n                break\n            default:\n                break\n        }\n    }\n\n    private hideNavigationArrows(): void {\n        this.leftArrowVisible = false\n        this.rightArrowVisible = false\n    }\n\n    private updateImage(): void {\n        // wait for animation to end\n        setTimeout(() => {\n            this.updateQuality()\n            this.images[this.currentIdx]['active'] = true\n            this.images.forEach(image => {\n                if (image != this.images[this.currentIdx]) {\n                    image['active'] = false\n                    this.transform = 0\n                }\n            })\n        }, 500)\n    }\n\n    private updateQuality(): void {\n        const screenWidth = window.innerWidth\n        const screenHeight = window.innerHeight\n\n        switch (this.qualitySelected) {\n            case 'auto': {\n                this.categorySelected = 'preview_xxs'\n\n                if (screenWidth > this.images[this.currentIdx]['preview_xxs'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_xxs'].height) {\n                    this.categorySelected = 'preview_xs'\n                }\n                if (screenWidth > this.images[this.currentIdx]['preview_xs'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_xs'].height) {\n                    this.categorySelected = 'preview_s'\n                }\n                if (screenWidth > this.images[this.currentIdx]['preview_s'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_s'].height) {\n                    this.categorySelected = 'preview_m'\n                }\n                if (screenWidth > this.images[this.currentIdx]['preview_m'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_m'].height) {\n                    this.categorySelected = 'preview_l'\n                }\n                if (screenWidth > this.images[this.currentIdx]['preview_l'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_l'].height) {\n                    this.categorySelected = 'preview_xl'\n                }\n                if (screenWidth > this.images[this.currentIdx]['preview_xl'].width &&\n                    screenHeight > this.images[this.currentIdx]['preview_xl'].height) {\n                    this.categorySelected = 'raw'\n                }\n                break\n            }\n            case 'low': {\n                this.categorySelected = 'preview_xxs'\n                break\n            }\n            case 'mid': {\n                this.categorySelected = 'preview_m'\n                break\n            }\n            case 'high': {\n                this.categorySelected = 'raw'\n                break\n            }\n            default: {\n              this.categorySelected = 'preview_m'\n            }\n        }\n    }\n}\n","import { NgModule } from '@angular/core'\nimport { ImageService } from './services/image.service'\nimport { GalleryComponent } from './gallery/gallery.component'\nimport { ViewerComponent } from './viewer/viewer.component'\nimport { FormsModule } from '@angular/forms'\nimport { CommonModule } from '@angular/common'\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations'\nimport { HttpClientModule } from '@angular/common/http'\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    HttpClientModule,\n    BrowserAnimationsModule\n  ],\n  declarations: [\n    GalleryComponent,\n    ViewerComponent\n  ],\n  providers: [\n    ImageService\n  ],\n  exports: [\n    GalleryComponent,\n    ViewerComponent\n  ]\n})\nexport class Angular2ImageGalleryModule {\n}\n"]}